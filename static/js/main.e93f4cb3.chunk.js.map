{"version":3,"sources":["api.ts","store/index.ts","constants.ts","components/Todo.tsx","components/TodoList.tsx","components/FilterTodos.tsx","components/ErrorWarning.tsx","components/UserInfo.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTodosFormServer","a","fetch","then","response","json","result","data","Error","status","statusText","serverResponse","getUserFormServer","id","userInfo","setTodos","todos","type","setTodosError","isErrorOccured","setUserError","error","setIsUserSelected","isUserSelected","stateTodos","state","isTodosError","isTodoError","todoFilterQuery","query","showTodosOnly","todosSelector","stateUserInfo","isUserError","userError","initialState","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","Todo","todo","dispatch","useDispatch","useSelector","handleClick","catch","setUserInfo","loadUserInfo","className","cn","completed","checked","readOnly","title","onClick","todoId","newTodos","filter","handleDelete","userId","TodoList","trim","filteredTodos","useMemo","tempTodos","filterQuery","includes","map","key","FilterTodos","value","onChange","event","target","htmlFor","shuffledTodos","i","length","j","Math","floor","random","shuffleTodos","ErrorWarning","solution","role","UserInfo","stateUser","username","name","phone","email","website","App","isUserInfoActive","userLoadError","isTodosLoadError","fetchTodos","useEffect","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e93f4cb3.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodosFormServer = async() => {\n  const serverResponse = await fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(result => {\n      if (!result.data) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n      return result.data;\n    })\n\n  return serverResponse;\n};\n\nexport const getUserFormServer = async(id: number) => {\n  const userInfo = await fetch(`${BASE_URL}/users/${id}`)\n    .then(response =>\n      response.json())\n    .then(result => {\n      if (!result.data) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n      return result.data;\n    })\n\n  return userInfo;\n};\n","import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { ALL } from '../constants';\nimport { getTodosFormServer, getUserFormServer } from '../api';\nimport { Dispatch } from 'redux';\nimport { TODO, RootState, USER } from '../typesDef';\n\n// Action types - is just a constant. MUST have a unique value.\nconst SET_TODOS = 'SET_TODOS';\nconst TODO_ERROR = 'TODO_ERROR';\nconst TODO_QUERY = 'TODO_QUERY';\nconst TODOS_SELECTOR = 'TODOS_SELECTOR';\nconst SET_USER = 'SET_USER';\nconst CLEAR_USER = 'CLEAR_USER';\nconst USER_ERROR = 'USER_ERROR';\nconst IS_USER_SELECTED = 'IS_USER_SELECTED';\n\n// Action creators - a function returning an action object\nexport const setTodos = (todos: TODO[]) => ({\n  type: SET_TODOS, todos,\n});\n\nexport const setTodosError = (isErrorOccured: boolean) => ({\n  type: TODO_ERROR, isErrorOccured\n})\n\nexport const setQuery = (query: string) => ({\n  type: TODO_QUERY, query\n})\n\nexport const changeSelector = (todosSelector : string) => ({\n  type: TODOS_SELECTOR, todosSelector,\n});\n\nexport const setUserInfo = (userInfo : USER | {}) => ({\n  type: SET_USER, userInfo,\n});\n\nexport const clearUserState = () => ({\n  type: CLEAR_USER,\n});\n\nexport const setUserError = (error: boolean) => ({\n  type: USER_ERROR, error\n})\n\nexport const setIsUserSelected = (isUserSelected: boolean) => ({\n  type: IS_USER_SELECTED, isUserSelected\n})\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const stateTodos = (state: RootState) => state.todos;\nexport const isTodosError = (state: RootState) => state.isTodoError;\nexport const todoFilterQuery = (state: RootState) => state.query;\nexport const showTodosOnly = (state: RootState) => state.todosSelector;\nexport const stateUserInfo = (state: RootState) => state.userInfo;\nexport const isUserError = (state: RootState) => state.userError;\nexport const isUserSelected = (state: RootState) => state.isUserSelected;\n\n// Initial state\nconst initialState: RootState = {\n  todos: [],\n  isTodoError: false,\n  query: '',\n  todosSelector: ALL,\n  userInfo: {},\n  userError: false,\n  isUserSelected: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n      case SET_TODOS:\n        return {\n          ...state,\n          todos: [...action.todos],\n        };\n\n      case TODO_ERROR:\n        return {\n          ...state,\n          isTodosError: action.isTodosError,\n        }\n\n      case TODO_QUERY: \n        return {\n          ...state,\n          query: action.query,\n        }\n\n      case TODOS_SELECTOR:\n        return {\n          ...state,\n          todosSelector: action.todosSelector,\n        };\n\n      case SET_USER:\n        return {\n          ...state,\n          userInfo: action.userInfo,\n        };\n\n      case CLEAR_USER:\n        return {\n          ...state,\n          userInfo: {},\n        };\n\n      case USER_ERROR:\n        return {\n          ...state,\n          userError: action.error,\n        }\n\n      case IS_USER_SELECTED:\n        return {\n          ...state,\n          isUserSelected: action.isUserSelected,\n        }\n\n    default:\n      return state;\n  }\n};\n\nexport const getTodos = () => {\n  return (dispatch: Dispatch) => {\n    getTodosFormServer()\n    .then((todos) => {\n      dispatch(setTodos(todos));\n      dispatch(setTodosError(false));\n    })\n    .catch(() => {\n      dispatch(setTodosError(true));\n    })\n  };\n};\n\nexport const loadUserInfo = (id: number) => {\n  return (dispatch: Dispatch) => {\n    getUserFormServer(id)\n    .catch(() => {\n      dispatch(setUserError(true))\n    })\n    .then((userInfo : USER) => {\n      dispatch(setUserInfo(userInfo));\n      dispatch(setUserError(false))});\n      ;\n  };\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","export const ALL = 'ALL';\nexport const ACTIVE = 'ACTIVE';\nexport const COMPLETED = 'COMPLETED';\n","import React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserInfo, setIsUserSelected, stateTodos, setTodos } from '../store';\nimport { TodoProps} from '../typesDef';\n\nimport cn from 'classnames';\n\nexport const Todo: FC<TodoProps> = ({ todo }) => {\n  const dispatch = useDispatch();\n  const todos = useSelector(stateTodos);\n\n  const handleClick = (id: number) => {\n    dispatch(loadUserInfo(id));\n    dispatch(setIsUserSelected(true));\n  };\n\n  const handleDelete = (todoId: number) => {\n    const newTodos = todos.filter(todo => todo.id !== todoId)\n\n    dispatch(setTodos(newTodos));\n  }\n\n  return (\n    <li className={cn('list-group-item',\n      {\n        'list-group-item-success': todo.completed,\n        'list-group-item-danger': !todo.completed,\n      })}\n    >\n      <input type=\"checkbox\" checked={todo.completed} readOnly />\n      <span className=\"ml-1\">{todo.title}</span>\n\n      <button\n        type=\"button\"\n        className=\"btn btn-danger float-right mr-1\"\n        onClick={() => handleDelete(todo.id)}\n      >\n        delete post\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"btn btn-primary float-right mr-1\"\n        onClick={() => handleClick(todo.userId)}\n      >\n        {`user #${todo.userId} info`}\n      </button>\n    </li>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Todo } from './Todo';\nimport { showTodosOnly, stateTodos, todoFilterQuery } from '../store';\nimport { ACTIVE, COMPLETED, ALL } from '../constants';\n\nexport const TodoList = () => {\n  const todos = useSelector(stateTodos);\n  const todosSelector = useSelector(showTodosOnly);\n  const query = useSelector(todoFilterQuery).trim();\n\n  const filteredTodos = useMemo(() => {\n    let tempTodos = [...todos];\n    const filterQuery = query.trim();\n\n    switch (todosSelector) {\n      case ALL:\n        tempTodos = tempTodos.filter(\n          todo => todo.title && todo.title.includes(filterQuery)\n        );\n        break;\n\n      case ACTIVE:\n        tempTodos = tempTodos.filter(todo => (\n          !todo.completed && todo.title && todo.title.includes(filterQuery)\n        ));\n        break;\n\n      case COMPLETED:\n        tempTodos = tempTodos.filter(todo => (\n          todo.completed && todo.title && todo.title.includes(filterQuery)\n        ));\n        break;\n\n      default:\n        return tempTodos;\n    }\n\n    return tempTodos;\n  }, [todosSelector, todos, query]);\n\n  return (\n    <ul className=\"list-group\">\n      {filteredTodos.map(todo => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeSelector, todoFilterQuery, setQuery, stateTodos, setTodos } from '../store';\nimport { ALL, ACTIVE, COMPLETED } from '../constants';\n\nexport const FilterTodos = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(stateTodos);\n  const filterQuery = useSelector(todoFilterQuery);\n\n  const shuffleTodos = () => {\n    const shuffledTodos = [...todos];\n\n    for (let i = shuffledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [shuffledTodos[i], shuffledTodos[j]]\n        = [shuffledTodos[j], shuffledTodos[i]];\n    }\n\n    dispatch(setTodos(shuffledTodos));\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-6\">\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">Filter todos by title</span>\n          </div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            value={filterQuery}\n            onChange={(event) => dispatch(setQuery(event.target.value))}\n          />\n        </div>\n      </div>\n\n      <div className=\"col-3\">\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label\n              className=\"input-group-text\"\n              htmlFor=\"inputGroupSelect01\"\n            >\n              Show todos\n            </label>\n          </div>\n          <select\n            className=\"custom-select\"\n            id=\"inputGroupSelect01\"\n            onChange={(event) => dispatch(changeSelector(event.target.value))}\n          >\n            <option value={ALL}>All</option>\n            <option value={ACTIVE}>Active</option>\n            <option value={COMPLETED}>Completed</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"col-3\">\n        <button\n          type=\"button\"\n          className=\"btn btn-warning ml-5\"\n          onClick={() => shuffleTodos()}\n        >\n          randomize\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { ErrorWarningProps } from '../typesDef';\n\nexport const ErrorWarning: FC<ErrorWarningProps> = ({ data, solution }) => {\n\n  return (\n    <div\n      className=\"alert alert-warning text-center text-danger\"\n      role=\"alert\"\n    >\n      <h3 className=\"text-center text-uppercase\">\n        {`Error during ${data} loading`}<br />{`Please ${solution}`}\n      </h3>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  stateUserInfo, clearUserState, setIsUserSelected\n} from '../store';\nimport { ErrorWarning } from './ErrorWarning';\nimport { USER } from '../typesDef';\n\nexport const UserInfo: FC = () => {\n  const stateUser: USER = useSelector(stateUserInfo);\n  const dispatch = useDispatch();\n\n  const resetUser = () => {\n    dispatch(clearUserState());\n    dispatch(setIsUserSelected(false));\n  };\n\n  return (\n    <div className=\"row sticky-top\">\n      <div className=\"col\">\n        <h1 className=\"text-center\">\n          User Info\n        </h1>\n        {stateUser ? (\n          <div className=\"card border-info mb-3\">\n            <div className=\"card-header\">{stateUser.username}</div>\n            <div className=\"card-body text-info\">\n              <h5 className=\"card-title\">{stateUser.name}</h5>\n              <p className=\"card-text\">\n                {`phone: ${stateUser.phone}`}\n              </p>\n              <p className=\"card-text\">\n                {`email: ${stateUser.email}`}\n              </p>\n              <p className=\"card-text\">\n                {`website: ${stateUser.website}`}\n              </p>\n              <button\n                type=\"button\"\n                className=\"btn btn-info\"\n                onClick={() => resetUser()}\n              >\n                Clear user info\n              </button>\n            </div>\n          </div>\n        ) : <ErrorWarning data={'user'} solution={'choose another user'} />\n        }\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getTodos, isUserError, isUserSelected, isTodosError\n} from './store';\nimport { TodoList } from './components/TodoList';\nimport { FilterTodos } from './components/FilterTodos';\nimport { UserInfo } from './components/UserInfo';\nimport './App.scss';\nimport { ErrorWarning } from './components/ErrorWarning';\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n  const isUserInfoActive = useSelector(isUserSelected);\n  const userLoadError = useSelector(isUserError);\n  const isTodosLoadError = useSelector(isTodosError);\n\n  const fetchTodos = () => {\n    dispatch(getTodos());\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-center\">Redux list of todos</h1>\n      <div className=\"container-fluid\">\n        <div className=\"row\" />\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <FilterTodos />\n            {!isTodosLoadError\n              ? <TodoList />\n              : <ErrorWarning\n                data={'todos'}\n                solution={'try again later'}\n              />\n            }\n          </div>\n          <div className=\"col-4\">\n            {userLoadError\n              ? 'Server not response'\n              : isUserInfoActive\n                ? <UserInfo />\n                : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}